/* tslint:disable */
/* eslint-disable */
/**
 * Menu API
 * Burger menu API docs
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Menu,
} from '../models/index';
import {
    MenuFromJSON,
    MenuToJSON,
} from '../models/index';

export interface MenuCreateRequest {
    data: Omit<Menu, 'id'>;
}

export interface MenuDeleteRequest {
    id: string;
}

export interface MenuReadRequest {
    id: string;
}

export interface MenuUpdateRequest {
    id: string;
    data: Omit<Menu, 'id'>;
}

/**
 * 
 */
export class MenuApi extends runtime.BaseAPI {

    /**
     */
    async menuCreateRaw(requestParameters: MenuCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Menu>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling menuCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/menu/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MenuToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MenuFromJSON(jsonValue));
    }

    /**
     */
    async menuCreate(requestParameters: MenuCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Menu> {
        const response = await this.menuCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async menuDeleteRaw(requestParameters: MenuDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling menuDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/menu/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async menuDelete(requestParameters: MenuDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.menuDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a list of menu items.
     */
    async menuListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Menu>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/menu/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MenuFromJSON));
    }

    /**
     * Returns a list of menu items.
     */
    async menuList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Menu>> {
        const response = await this.menuListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async menuReadRaw(requestParameters: MenuReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Menu>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling menuRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/menu/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MenuFromJSON(jsonValue));
    }

    /**
     */
    async menuRead(requestParameters: MenuReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Menu> {
        const response = await this.menuReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async menuUpdateRaw(requestParameters: MenuUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Menu>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling menuUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling menuUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/menu/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MenuToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MenuFromJSON(jsonValue));
    }

    /**
     */
    async menuUpdate(requestParameters: MenuUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Menu> {
        const response = await this.menuUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
