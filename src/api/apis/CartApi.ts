/* tslint:disable */
/* eslint-disable */
/**
 * Menu API
 * Burger menu API docs
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Cart,
} from '../models/index';
import {
    CartFromJSON,
    CartToJSON,
} from '../models/index';

export interface MenuCartCreateRequest {
    data: Omit<Cart, 'id'|'toppings'>;
}

export interface MenuCartDeleteRequest {
    id: string;
}

export interface MenuCartReadRequest {
    id: string;
}

export interface MenuCartUpdateRequest {
    id: string;
    data: Omit<Cart, 'id'|'toppings'>;
}

/**
 * 
 */
export class CartApi extends runtime.BaseAPI {
    menuCartDestroy(cartItemId: number) {
        throw new Error("Method not implemented.");
    }

    /**
     * Add an item to the cart.
     */
    async menuCartCreateRaw(requestParameters: MenuCartCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Cart>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling menuCartCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/menu/cart/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CartToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartFromJSON(jsonValue));
    }

    /**
     * Add an item to the cart.
     */
    async menuCartCreate(requestParameters: MenuCartCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Cart> {
        const response = await this.menuCartCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a specific cart item by ID.
     */
    async menuCartDeleteRaw(requestParameters: MenuCartDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling menuCartDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/menu/cart/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a specific cart item by ID.
     */
    async menuCartDelete(requestParameters: MenuCartDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.menuCartDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a list of items in the cart.
     */
    async menuCartListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Cart>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/menu/cart/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CartFromJSON));
    }

    /**
     * Returns a list of items in the cart.
     */
    async menuCartList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Cart>> {
        const response = await this.menuCartListRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns a specific cart item by ID.
     */
    async menuCartReadRaw(requestParameters: MenuCartReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Cart>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling menuCartRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/menu/cart/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartFromJSON(jsonValue));
    }

    /**
     * Returns a specific cart item by ID.
     */
    async menuCartRead(requestParameters: MenuCartReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Cart> {
        const response = await this.menuCartReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a specific cart item by ID.
     */
    async menuCartUpdateRaw(requestParameters: MenuCartUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Cart>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling menuCartUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling menuCartUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/menu/cart/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CartToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartFromJSON(jsonValue));
    }

    /**
     * Update a specific cart item by ID.
     */
    async menuCartUpdate(requestParameters: MenuCartUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Cart> {
        const response = await this.menuCartUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
