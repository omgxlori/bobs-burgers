/* tslint:disable */
/* eslint-disable */
/**
 * Menu API
 * Burger menu API docs
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Menu } from './Menu';
import {
    MenuFromJSON,
    MenuFromJSONTyped,
    MenuToJSON,
    MenuToJSONTyped,
} from './Menu';

/**
 * 
 * @export
 * @interface CartItem
 */
export interface CartItem {
    /**
     * 
     * @type {number}
     * @memberof CartItem
     */
    readonly id?: number;
    /**
     * 
     * @type {Menu}
     * @memberof CartItem
     */
    menuItem?: Menu;
    /**
     * 
     * @type {number}
     * @memberof CartItem
     */
    menuItemId: number;
    /**
     * 
     * @type {number}
     * @memberof CartItem
     */
    quantity?: number;
    /**
     * 
     * @type {Set<number>}
     * @memberof CartItem
     */
    toppings?: Set<number>;
    /**
     * 
     * @type {string}
     * @memberof CartItem
     */
    note?: string;
}

/**
 * Check if a given object implements the CartItem interface.
 */
export function instanceOfCartItem(value: object): value is CartItem {
    if (!('menuItemId' in value) || value['menuItemId'] === undefined) return false;
    return true;
}

export function CartItemFromJSON(json: any): CartItem {
    return CartItemFromJSONTyped(json, false);
}

export function CartItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): CartItem {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'menuItem': json['menu_item'] == null ? undefined : MenuFromJSON(json['menu_item']),
        'menuItemId': json['menu_item_id'],
        'quantity': json['quantity'] == null ? undefined : json['quantity'],
        'toppings': json['toppings'] == null ? undefined : new Set(json['toppings']),
        'note': json['note'] == null ? undefined : json['note'],
    };
}

export function CartItemToJSON(json: any): CartItem {
    return CartItemToJSONTyped(json, false);
}

export function CartItemToJSONTyped(value?: Omit<CartItem, 'id'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'menu_item': MenuToJSON(value['menuItem']),
        'menu_item_id': value['menuItemId'],
        'quantity': value['quantity'],
        'toppings': value['toppings'] == null ? undefined : Array.from(value['toppings'] as Set<any>),
        'note': value['note'],
    };
}

